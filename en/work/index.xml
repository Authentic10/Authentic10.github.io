<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Works on Ahmed Tchagnaou</title><link>https://atchagnaou.me/en/work/</link><description>Recent content in Works on Ahmed Tchagnaou</description><generator>Hugo -- gohugo.io</generator><copyright>Â© {year}</copyright><atom:link href="https://atchagnaou.me/en/work/index.xml" rel="self" type="application/rss+xml"/><item><title>Daxmod</title><link>https://atchagnaou.me/en/work/daxmod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://atchagnaou.me/en/work/daxmod/</guid><description>Daxmod is a toolbox that allows engineers and researchers to perform text classification experiments. It offers modules for data analysis, feature extraction, feature selection, model building and model persistence. Daxmod was built with Python. The source code is available on Github : Daxmod</description></item><item><title>Fatal Encounters</title><link>https://atchagnaou.me/en/work/fatal-encounters/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://atchagnaou.me/en/work/fatal-encounters/</guid><description>The goal of this post is to explore the Fatal Encounters dataset. First, we defined a set of questions. Then we created graphs to answer these questions and finally, we commented on these graphs. Fatal Encounters documents non-police deaths that occur when police are present or are precipitated by police action or presence. It documents all available records for all 50 states of USA, back to 2000. The general ouline of this post is as follows : Part 1 : Exploration Visualisation based on race Visualization based on state Other visualizations Part 2 : Summary Part 1 : Exploration 1.</description></item><item><title>KNN from scratch</title><link>https://atchagnaou.me/en/work/knn-iris/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://atchagnaou.me/en/work/knn-iris/</guid><description>In this project, we implemented the KNN algorithm from scratch on the iris dataset. We implemented the following features : Euclidean distance computing Train et test split Computing of metrics like precision and recall Confusion matrix Cross Validation The project has been implemented in Java and it is available on Github : KNN</description></item></channel></rss>